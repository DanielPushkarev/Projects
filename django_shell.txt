python manage.py shell
from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum
from news.models import *

	u1 = User.objects.create(username='User1')
	u2 = User.objects.create(username='User2')

Создать два объекта модели Author, связанные с пользователями.

	Author.objects.create(user=u1)
	Author.objects.create(user=u2)

Добавить 4 категории в модель Category.

	Category.objects.create(catg='Politics')
	Category.objects.create(catg='Economy')
	Category.objects.create(catg='Incidents')
	Category.objects.create(catg='Sports')

Добавить 2 статьи и 1 новость.
	au1 = Author.objects.get(pk=1)
	au2 = Author.objects.get(pk=2)
	Post.objects.create(author=au1  , categoryType= 'Article', title='The article of the first author ', text='here is the first text of the first author about incidents and politics')
	Post.objects.create(author=au2  , categoryType= 'Article', title='The article of the second author ', text='here is the first text of the second author about sports')
	Post.objects.create(author=au2  , categoryType= 'Novost', title='The news of the second author ', text='here is the first news of the second author about sports')

	Post.objects.get(pk=2).preview() 

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

	Post.objects.get(pk=1).post_category.add(Category.objects.get(pk=1)) 
	Post.objects.get(pk=1).post_category.add(Category.objects.get(pk=3))
	Post.objects.get(pk=2).post_category.add(Category.objects.get(pk=4))

Создать как минимум 4 комментария к разным объектам модели Post 
(в каждом объекте должен быть как минимум один комментарий).

	Comment.objects.create(post=Post.objects.get(id=1), comment_1=Author.objects.get(id=1).user, text='comment on the policy in the first article from author 1')
	Comment.objects.create(post=Post.objects.get(id=1), comment_1=Author.objects.get(id=2).user, text='comment on the policy in the first article from author 2')
	Comment.objects.create(post=Post.objects.get(id=2), comment_1=Author.objects.get(id=1).user, text='comment on the Sport in the second article from author 1')
	Comment.objects.create(post=Post.objects.get(id=2), comment_1=Author.objects.get(id=2).user, text='comment on the Sport in the second article from author 2')



Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

	Post.objects.get(pk=1).like()
	Post.objects.get(pk=1).dislike()
	Post.objects.get(pk=2).like()
	Post.objects.get(pk=2).dislike()

	Comment.objects.get(pk=1).like()
	Comment.objects.get(pk=1).dislike()
	Comment.objects.get(pk=2).like()
	Comment.objects.get(pk=2).dislike()

	Comment.objects.get(pk=3).like()
	Comment.objects.get(pk=3).dislike()

	Comment.objects.get(pk=2).rating

Обновить рейтинги пользователей.

	a1 = Author.objects.get(pk=1)
	a1.update_rating()
	

Вывести username и рейтинг лучшего пользователя

Author.objects.all().order_by('-author_ranking').values('user', 'author_ranking')[0]


Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

Post.objects.all().order_by('-ranking').values('autodata', 'author', 'ranking', 'title')[0]
Post.objects.all().order_by('-ranking')[0]


Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Comment.objects.filter(post=Post.objects.all().order_by('-ranking')[0]).values('date', 'comment_1', 'ranking', 'text')